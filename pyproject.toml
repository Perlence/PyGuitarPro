[project]
name = "PyGuitarPro"
version = "0.10"
description = "Read, write, and manipulate GP3, GP4 and GP5 files."
readme = "README.rst"
license = "LGPL-3.0-only"
license-files = ["LICENSE"]
authors = [{name = "Sviatoslav Abakumov", email = "dust.harvesting@gmail.com"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Artistic Software",
    "Topic :: Multimedia :: Sound/Audio",
]
requires-python = ">=3.9"
dependencies = [
    "attrs>=19.2",
]

[dependency-groups]
dev = [
    "tox>=4.29.0",
    "tox-uv>=1.28.0",
]
docs = [
    "sphinx>=7.4.7",
    "sphinx-rtd-theme>=3.0.2",
]
pre-commit = [
    "pre-commit>=4.3.0",
    "pre-commit-uv>=4.1.5",
]
tests = [
    "pytest>=8.4.1",
]

[tool.uv]
default-groups = ["dev", "pre-commit", "tests"]

[project.urls]
Documentation = "https://pyguitarpro.readthedocs.io/"
"Source code" = "https://github.com/Perlence/PyGuitarPro"
"Issue tracker" = "https://github.com/Perlence/PyGuitarPro/issues"

[build-system]
build-backend = "uv_build"
requires = ["uv_build>=0.8.14,<0.9.0"]

[tool.uv.build-backend]
module-name = "guitarpro"
source-include = [
    "docs/**",
    "examples/**",
    "tests/**",
    "CHANGES.rst",
    "uv.lock",
]
source-exclude = [
    "docs/_build",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.flake8]
max-line-length = 120

[tool.tox]
envlist = [
    "style",
]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
use_frozen_constraints = true
dependency_groups = [
    "tests",
]
commands = [["pytest"]]

[tool.tox.env.style]
runner = "uv-venv-lock-runner"
dependency_groups = [
    "pre-commit",
]
skip_install = true
commands = [["pre-commit", "run", "--all-files"]]
